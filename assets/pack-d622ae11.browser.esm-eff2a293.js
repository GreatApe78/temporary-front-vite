var q=Object.defineProperty;var U=(m,s,t)=>s in m?q(m,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):m[s]=t;var u=(m,s,t)=>(U(m,typeof s!="symbol"?s+"":s,t),t);import{aG as $,ap as F,t as W,A as N,u as x,aH as M,v as _,x as z,y as D,H as V,J as K,G as E,L as Q,M as B,O as G,P as H,B as w,af as y,ag as C,Q as k,a3 as Y,a9 as S,T as f,aq as j,aI as b,aJ as J,$ as O,aK as Z,aL as X,aM as tt,az as at,aN as R,aO as rt,aP as l,aQ as et,aR as T,aS as nt}from"./index-12667cfc.js";import{S as st}from"./erc-1155-standard-abe3c512.browser.esm-fb27d7c3.js";import{h as ot}from"./hasERC20Allowance-72268bf5.browser.esm-d84646e8.js";const v=R.object({contractAddress:nt}),ct=v.extend({quantity:T}),dt=v.extend({tokenId:l}),it=v.extend({tokenId:l,quantity:l}),pt=ct.omit({quantity:!0}).extend({quantityPerReward:T}),ht=dt,ut=it.omit({quantity:!0}).extend({quantityPerReward:l}),gt=(()=>pt.extend({totalRewards:l.default("1")}))(),wt=ht,lt=(()=>ut.extend({totalRewards:l.default("1")}))(),L=(()=>R.object({erc20Rewards:R.array(gt).default([]),erc721Rewards:R.array(wt).default([]),erc1155Rewards:R.array(lt).default([])}))(),mt=(()=>L.extend({packMetadata:rt,rewardsPerPack:l.default("1"),openStartTime:et.default(new Date)}))();class kt{constructor(s,t,e,n,a){u(this,"featureName",b.name);u(this,"open",k((()=>{var s=this;return async function(t){let e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:5e5;return f.fromContractWrapper({contractWrapper:s.contractWrapper,method:"openPack",args:[t,e],overrides:{gasLimit:n},parse:a=>{let o=w.from(0);try{o=s.contractWrapper.parseLogs("PackOpenRequested",a==null?void 0:a.logs)[0].args.requestId}catch{}return{receipt:a,id:o}}})}})()));u(this,"claimRewards",k((()=>{var s=this;return async function(){let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:5e5;return f.fromContractWrapper({contractWrapper:s.contractWrapper,method:"claimRewards",args:[],overrides:{gasLimit:t},parse:async e=>{const n=s.contractWrapper.parseLogs("PackOpened",e==null?void 0:e.logs);if(n.length===0)throw new Error("PackOpened event not found");const a=n[0].args.rewardUnitsDistributed;return await s.parseRewards(a)}})}})()));let o=arguments.length>5&&arguments[5]!==void 0?arguments[5]:new W(s,t,J,n,e);this.contractWrapper=o,this.storage=e,this.chainId=a,this.events=new E(this.contractWrapper)}onNetworkUpdated(s){this.contractWrapper.updateSignerOrProvider(s)}getAddress(){return this.contractWrapper.readContract.address}async parseRewards(s){const t=[],e=[],n=[];for(const a of s)switch(a.tokenType){case 0:{const o=await y(this.contractWrapper.getProvider(),a.assetContract);t.push({contractAddress:a.assetContract,quantityPerReward:C(a.totalAmount,o.decimals).toString()});break}case 1:{e.push({contractAddress:a.assetContract,tokenId:a.tokenId.toString()});break}case 2:{n.push({contractAddress:a.assetContract,tokenId:a.tokenId.toString(),quantityPerReward:a.totalAmount.toString()});break}}return{erc20Rewards:t,erc721Rewards:e,erc1155Rewards:n}}async addPackOpenEventListener(s){return this.events.addEventListener("PackOpened",async t=>{s(t.data.packId.toString(),t.data.opener,await this.parseRewards(t.data.rewardUnitsDistributed))})}async canClaimRewards(s){const t=await O(s||await this.contractWrapper.getSignerAddress());return await this.contractWrapper.readContract.canClaimRewards(t)}async openAndClaim(s){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,e=arguments.length>2&&arguments[2]!==void 0?arguments[2]:5e5;const n=await this.contractWrapper.sendTransaction("openPackAndClaimRewards",[s,t,e],{gasLimit:w.from(5e5)});let a=w.from(0);try{a=this.contractWrapper.parseLogs("PackOpenRequested",n==null?void 0:n.logs)[0].args.requestId}catch{}return{receipt:n,id:a}}async getLinkBalance(){return this.getLinkContract().balanceOf(this.contractWrapper.readContract.address)}async transferLink(s){await this.getLinkContract().transfer(this.contractWrapper.readContract.address,s)}getLinkContract(){const s=Z[this.chainId];if(!s)throw new Error(`No LINK token address found for chainId ${this.chainId}`);const t=new W(this.contractWrapper.getSignerOrProvider(),s,X,this.contractWrapper.options,this.storage);return new tt(t,this.storage,this.chainId)}}const A=class A extends st{constructor(t,e,n){let a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},o=arguments.length>4?arguments[4]:void 0,p=arguments.length>5?arguments[5]:void 0,i=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new W(t,e,o,a.gasless&&"openzeppelin"in a.gasless?{...a,gasless:{...a.gasless,openzeppelin:{...a.gasless.openzeppelin,useEOAForwarder:!0}}}:a,n);super(i,n,p);u(this,"create",k(async t=>{const e=await this.contractWrapper.getSignerAddress();return this.createTo.prepare(e,t)}));u(this,"addPackContents",k(async(t,e)=>{const n=await this.contractWrapper.getSignerAddress(),a=await L.parseAsync(e),{contents:o,numOfRewardUnits:p}=await this.toPackContentArgs(a);return f.fromContractWrapper({contractWrapper:this.contractWrapper,method:"addPackContents",args:[t,o,p,n],parse:i=>{const c=this.contractWrapper.parseLogs("PackUpdated",i==null?void 0:i.logs);if(c.length===0)throw new Error("PackUpdated event not found");const r=c[0].args.packId;return{id:r,receipt:i,data:()=>this.erc1155.get(r)}}})}));u(this,"createTo",k(async(t,e)=>{const n=await at(e.packMetadata,this.storage),a=await mt.parseAsync(e),{erc20Rewards:o,erc721Rewards:p,erc1155Rewards:i}=a,c={erc20Rewards:o,erc721Rewards:p,erc1155Rewards:i},{contents:r,numOfRewardUnits:h}=await this.toPackContentArgs(c);return f.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createPack",args:[r,h,n,a.openStartTime,a.rewardsPerPack,await O(t)],parse:d=>{const g=this.contractWrapper.parseLogs("PackCreated",d==null?void 0:d.logs);if(g.length===0)throw new Error("PackCreated event not found");const P=g[0].args.packId;return{id:P,receipt:d,data:()=>this.erc1155.get(P)}}})}));u(this,"open",k((()=>{var t=this;return async function(e){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,a=arguments.length>2&&arguments[2]!==void 0?arguments[2]:5e5;if(t._vrf)throw new Error("This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead");return f.fromContractWrapper({contractWrapper:t.contractWrapper,method:"openPack",args:[e,n],overrides:{gasLimit:a},parse:async o=>{const p=t.contractWrapper.parseLogs("PackOpened",o==null?void 0:o.logs);if(p.length===0)throw new Error("PackOpened event not found");const i=p[0].args.rewardUnitsDistributed,c=[],r=[],h=[];for(const d of i)switch(d.tokenType){case 0:{const g=await y(t.contractWrapper.getProvider(),d.assetContract);c.push({contractAddress:d.assetContract,quantityPerReward:C(d.totalAmount,g.decimals).toString()});break}case 1:{r.push({contractAddress:d.assetContract,tokenId:d.tokenId.toString()});break}case 2:{h.push({contractAddress:d.assetContract,tokenId:d.tokenId.toString(),quantityPerReward:d.totalAmount.toString()});break}}return{erc20Rewards:c,erc721Rewards:r,erc1155Rewards:h}}})}})()));this.abi=N.parse(o||[]),this.metadata=new x(this.contractWrapper,M,this.storage),this.app=new _(this.contractWrapper,this.metadata,this.storage),this.roles=new z(this.contractWrapper,A.contractRoles),this.royalties=new D(this.contractWrapper,this.metadata),this.encoder=new V(this.contractWrapper),this.estimator=new K(this.contractWrapper),this.events=new E(this.contractWrapper),this.interceptor=new Q(this.contractWrapper),this.owner=new B(this.contractWrapper),this._vrf=this.detectVrf()}get vrf(){return F(this._vrf,b)}onNetworkUpdated(t){var e;this.contractWrapper.updateSignerOrProvider(t),(e=this._vrf)==null||e.onNetworkUpdated(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){return this.erc1155.get(t)}async getAll(t){return this.erc1155.getAll(t)}async getOwned(t){return this.erc1155.getOwned(t)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(G("transfer"),H)}async getPackContents(t){const{contents:e,perUnitAmounts:n}=await this.contractWrapper.readContract.getPackContents(t),a=[],o=[],p=[];for(let i=0;i<e.length;i++){const c=e[i],r=n[i];switch(c.tokenType){case 0:{const h=await y(this.contractWrapper.getProvider(),c.assetContract),d=C(r,h.decimals),g=C(w.from(c.totalAmount).div(r),h.decimals);a.push({contractAddress:c.assetContract,quantityPerReward:d,totalRewards:g});break}case 1:{o.push({contractAddress:c.assetContract,tokenId:c.tokenId.toString()});break}case 2:{p.push({contractAddress:c.assetContract,tokenId:c.tokenId.toString(),quantityPerReward:r.toString(),totalRewards:w.from(c.totalAmount).div(r).toString()});break}}}return{erc20Rewards:a,erc721Rewards:o,erc1155Rewards:p}}async toPackContentArgs(t){const e=[],n=[],{erc20Rewards:a,erc721Rewards:o,erc1155Rewards:p}=t,i=this.contractWrapper.getProvider(),c=await this.contractWrapper.getSignerAddress();for(const r of a){const d=(await Y(i,r.quantityPerReward,r.contractAddress)).mul(r.totalRewards);if(!await ot(this.contractWrapper,r.contractAddress,d))throw new Error(`ERC20 token with contract address "${r.contractAddress}" does not have enough allowance to transfer.

You can set allowance to the multiwrap contract to transfer these tokens by running:

await sdk.getToken("${r.contractAddress}").setAllowance("${this.getAddress()}", ${d});

`);n.push(r.totalRewards),e.push({assetContract:r.contractAddress,tokenType:0,totalAmount:d,tokenId:0})}for(const r of o){if(!await S(this.contractWrapper.getProvider(),this.getAddress(),r.contractAddress,r.tokenId,c))throw new Error(`ERC721 token "${r.tokenId}" with contract address "${r.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getNFTCollection("${r.contractAddress}").setApprovalForToken("${this.getAddress()}", ${r.tokenId});

`);n.push("1"),e.push({assetContract:r.contractAddress,tokenType:1,totalAmount:1,tokenId:r.tokenId})}for(const r of p){if(!await S(this.contractWrapper.getProvider(),this.getAddress(),r.contractAddress,r.tokenId,c))throw new Error(`ERC1155 token "${r.tokenId}" with contract address "${r.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getEdition("${r.contractAddress}").setApprovalForAll("${this.getAddress()}", true);

`);n.push(r.totalRewards),e.push({assetContract:r.contractAddress,tokenType:2,totalAmount:w.from(r.quantityPerReward).mul(w.from(r.totalRewards)),tokenId:r.tokenId})}return{contents:e,numOfRewardUnits:n}}async prepare(t,e,n){return f.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:e,overrides:n})}async call(t,e,n){return this.contractWrapper.call(t,e,n)}detectVrf(){if(j(this.contractWrapper,"PackVRF"))return new kt(this.contractWrapper.getSignerOrProvider(),this.contractWrapper.readContract.address,this.storage,this.contractWrapper.options,this.chainId)}};u(A,"contractRoles",$);let I=A;export{I as Pack};
